# - *- coding: utf- 8 - *-
import os
from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery

from tgbot.database.db_users import UserModel
from tgbot.database.db_files import Filex
from tgbot.database.db_extensions import Extensionsx
from tgbot.database.db_mime_types import MimeTypesx
from tgbot.keyboards.inline_user import abort_upload_finl
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.const_functions import ded, format_size

from tgbot.utils.misc.files import validate_file, download_file_and_generate_name, encrypt_downloaded_file, get_file_hash

router = Router(name=__name__)


@router.message(F.text == 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã')
async def user_button_inline(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()

    await state.set_state("load_files")
    await message.answer(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏", reply_markup=abort_upload_finl()
    )
    

@router.message(F.text == 'üßÆ –ú–æ–∏ —Ñ–∞–π–ª—ã')
async def user_button_inline(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()

    await message.answer(
        "Click Button - User Inline"
    )
    
    
# –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@router.message(Command(commands=['abort_upload']))
async def cancellation(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(f"<b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>")
    
    
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@router.message(F.document, StateFilter('load_files'))
async def prod_position_add_file_get(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ MIME —Ç–∏–ø—ã
    validation_error = validate_file(message.document.file_name, message.document.mime_type)
    if validation_error:
        await message.answer(validation_error)
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        download_path, new_file_name = await download_file_and_generate_name(bot, message.document.file_id, message.document.file_name)

        # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à —Ñ–∞–π–ª–∞
        file_hash = get_file_hash(download_path, hash_algorithm='sha256')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ö—ç—à—É
        existing_file = Filex.get(file_hash=file_hash, user_id=User.id)
        if existing_file:
            await message.answer(f"‚ùå –§–∞–π–ª —Å —Ö—ç—à–µ–º {file_hash} —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤–∞–º–∏!")
            return
        existing_file_other_user = Filex.get(file_hash=file_hash)
        if existing_file_other_user:
            pass

        file_extension = os.path.splitext(message.document.file_name)[1].lower()

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        extension = Extensionsx.get(extension=file_extension)
        if not extension:
            Extensionsx.add(file_extension)  # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
            extension = Extensionsx.get(extension=file_extension)  # –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ ID

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º MIME-—Ç–∏–ø –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        mime = MimeTypesx.get(mime_type=message.document.mime_type)
        if not mime:
            MimeTypesx.add(message.document.mime_type)  # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
            mime = MimeTypesx.get(mime_type=message.document.mime_typeype)  # –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ ID

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è ID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ MIME- —Ç–∏–ø
        Filex.add(
            name=message.document.file_name,
            path=download_path,
            extensions_id=extension.id,
            mime_type_id=mime.id,
            file_hash=file_hash,
            user_id=User.id,
            size=message.document.file_size
        )

        encrypted_file_path = encrypt_downloaded_file(download_path)
        await message.answer(ded(f"""
            –§–∞–π–ª <code>{message.document.file_name}</code> ({format_size(message.document.file_size)}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
            """))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
